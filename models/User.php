<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $email
 * @property string|null $username
 * @property string $password
 * @property int $role
 *
 * @property Comment[] $coments
 * @property Post[] $posts
 */
class User extends \yii\db\ActiveRecord implements \yii\web\IdentityInterface
{

    public $check;
    public $passwordRepeat;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['email', 'username', 'password'], 'required'],
            [['role'], 'integer'],
            [['email', 'password'], 'string', 'max' => 255],
            [['username'], 'string', 'max' => 50],
            [['email', 'username'], 'unique', 'targetAttribute' => ['email', 'username'], 'message' => 'Данный Email или никнейм уже заняты'],
            ['email','email', 'message' => 'Email должен содержать латинские буквы, @ и точку'],
            ['passwordRepeat','compare','compareAttribute'=>'password', 'message' => 'Пароль и подтверждение пароля не совпадают'],
            [['password'], 'string', 'min' => 8, 'message' => 'Пароль должен содержать не мение 8 символов'],
            ['check','boolean'],
            ['check','compare','compareValue'=>true, 'message'=>'Необходимо ваше согласие']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'email' => 'Email',
            'username' => 'Никнейм',
            'password' => 'Пароль',
            'passwordRepeat' => 'Подтверждение пароля',
            'check' => 'Согласие на обработку персональных данных',

        ];
    }

    /**
     * Gets query for [[Coments]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getComents()
    {
        return $this->hasMany(Comment::class, ['id_user' => 'id']);
    }

    /**
     * Gets query for [[Posts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Post::class, ['id_user' => 'id']);
    }


    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null;
    }

    public function getId()
    {
        return $this->id;
    }

    public function getAuthKey()
    {
        return null;
    }

    public function validateAuthKey($authKey)
    {
        return null;
    }

    /**
     * Finds user by email
     *
     * @param string $email
     * @return static|null
     */
    public static function findByEmail($email)
    {
        return static::findOne(['email' => $email]);
    }

    /**
     * функция проверки пароля
     */
    public function validatePassword($password)
    {
        return $this->password === md5($password);
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->password = md5($this->password);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }



//    закладки
    public function getBookmarks()
    {
        return $this->hasMany(Lesson::class, ['id' => 'lesson_id'])
            ->viaTable('user_bookmarks', ['user_id' => 'id']);
    }
}